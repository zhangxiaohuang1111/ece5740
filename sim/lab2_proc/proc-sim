#!/usr/bin/env python
#=========================================================================
# proc-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --impl              {fl,base,alt}
#  --input dataset     {vvadd-unopt,vvadd-opt,cmult,mfilt,bsearch}
#  --verify            Verify results
#  --trace             Display line tracing
#  --stats             Display statistics
#  --dump-vcd          Dump VCD to proc-<impl>-<input>.vcd
#  --max-cycles        Set timeout num_cycles, default=15000
#  --mem-delays        Turn on memory delays for testing
#
# Author : Moyang Wang, Christopher Batten
# Date   : September 21, 2022
#

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re

from random import randint, seed

seed(0xdeadbeef)

from pymtl3 import *
from pymtl3.stdlib.test_utils import config_model_with_cmdline_opts
from pymtl3.passes.backends.verilog import VerilogPlaceholderPass

from lab2_proc.ProcFL           import ProcFL
from lab2_proc.ProcBase         import ProcBase
from lab2_proc.ProcAlt          import ProcAlt

from lab2_proc.test.harness     import TestHarness
from lab2_proc.tinyrv2_encoding import assemble

from lab2_proc.ubmark.proc_ubmark_vvadd_unopt   import ubmark_vvadd_unopt
from lab2_proc.ubmark.proc_ubmark_vvadd_opt     import ubmark_vvadd_opt
from lab2_proc.ubmark.proc_ubmark_cmult         import ubmark_cmult
from lab2_proc.ubmark.proc_ubmark_bsearch       import ubmark_bsearch
from lab2_proc.ubmark.proc_ubmark_mfilt         import ubmark_mfilt

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",                    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl",  default="fl", choices=["fl","base","alt"] )
  p.add_argument( "--input", default="vvadd-unopt",
    choices=["vvadd-unopt", "vvadd-opt", "cmult", "mfilt", "bsearch"] )

  p.add_argument( "--trace",                     action="store_true" )
  p.add_argument( "--stats",                     action="store_true" )
  p.add_argument( "--verify",                    action="store_true" )
  p.add_argument( "--dump-vcd",                  action="store_true" )
  p.add_argument( "--mem-delays",                action="store_true" )
  p.add_argument( "--max-cycles", default=15000, type=int            )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Determine which model to use in the simulator

  model_impl_dict = {
    "fl"  : ProcFL,
    "base": ProcBase,
    "alt" : ProcAlt,
  }

  # Create test harness (we can reuse the harness from unit testing)

  th = TestHarness( model_impl_dict[ opts.impl ] )

  # Set the memory latency

  if opts.mem_delays:
    th.set_param( "top.mem.construct", stall_prob=0.5 )
    th.set_param( "top.mem.construct", extra_latency=3 )

  # Create VCD filename

  unique_name = f"proc-{opts.impl}-{opts.input}"

  cmdline_opts = {
    'dump_vcd': f"{unique_name}" if opts.dump_vcd else '',
  }

  # Configure the test harness component

  config_model_with_cmdline_opts( th, cmdline_opts, duts=['proc'] )

  # Apply necessary passes

  th.apply( DefaultPassGroup( linetrace=opts.trace ) )

  # Determine input program

  input_dict = {
    "vvadd-unopt"   : ubmark_vvadd_unopt,
    "vvadd-opt"     : ubmark_vvadd_opt,
    "bsearch"       : ubmark_bsearch,
    "mfilt"         : ubmark_mfilt,
    "cmult"         : ubmark_cmult,
  }

  input = input_dict[ opts.input ]

  # Assemble the test program

  mem_image = input.gen_mem_image()

  # Load the program into the model

  th.load( mem_image )

  # Reset test harness

  print()
  th.sim_reset()

  # Run simulation

  num_insts = 0
  while not th.done() and th.sim_cycle_count() < opts.max_cycles:
    th.sim_tick()

    # count number of commited instructions
    if th.commit_inst:
      num_insts += 1

  # Force a test failure if we timed out

  num_cycles = th.sim_cycle_count()
  assert num_cycles < opts.max_cycles

  # Extra ticks to make VCD easier to read

  th.sim_tick()
  th.sim_tick()
  th.sim_tick()

  if opts.verify:
    passed = input.verify( th.mem.mem.mem )
    print()
    if not passed:
      exit(1)

  if opts.stats:
    cpi = float(num_cycles) / float(num_insts)
    print( " num_cycles = {}".format( num_cycles ) )
    print( " num_insts  = {}".format( num_insts ) )
    print( " CPI        = {:1.2f}".format( cpi ) )
    print()

main()

