#!/usr/bin/env python
#=========================================================================
# mem-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#  -v --verbose        Verbose mode
#
#  --impl impl         {fl,base,alt}
#  --input dataset     {loop1,loop2,loop3}
#  --trace             Display line tracing
#  --stats             Display statistics
#  --dump-vcd          Dump VCD to mem-impl-input.vcd
#  --mem-lat           Set memory latency (in cycles), default=20
#
# The three datasets correspond to the following cache access patterns:
#
#   loop1:
#     a array allocated at 0x1000
#     for ( i = 0; i < 100; i++ )
#       result += a[i];
#
#   loop2:
#     a array allocated at 0x1000
#     b array allocated at 0x2000
#     for ( i = 0; i < 100; i ++ )
#       result += a[i]*b[i]
#
#   loop3
#     a array allocated at 0x1000
#     b array allocated at 0x2000
#     c array allocated at 0x3080
#     for ( i = 0; i < 100; i ++ )
#       result += a[i]*b[i] + c[i]
#
# Author : Shreesha Srinath, Moyang Wang, Christopher Batten
# Date   : October 8, 2015, updated October 31, 2022
#

# Hack to add project root to python path

import os
import sys
from random import randint


sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re

from pymtl3 import *
from pymtl3.stdlib.test_utils import config_model_with_cmdline_opts
from pymtl3.passes.backends.verilog import VerilogPlaceholderPass

from lab3_mem.CacheFL   import CacheFL
from lab3_mem.CacheBase import CacheBase
from lab3_mem.CacheAlt  import CacheAlt

from lab3_mem.test.harness import req, resp, run_test
from lab3_mem.test.harness import TestHarness
from lab3_mem.test.CacheFL_test import cmp_wo_test_field

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( s, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-v", "--verbose",  action="store_true"                         )
  p.add_argument( "-h", "--help",     action="store_true"                         )
  p.add_argument(       "--impl",     choices=["fl","base", "alt"], default="fl"  )
  p.add_argument(       "--input",    choices=["loop1", "loop2", "loop3","loop4","loop5","loop6"], default="loop1" )
  p.add_argument(       "--trace",    action="store_true"                                          )
  p.add_argument(       "--stats",    action="store_true"                                          )
  p.add_argument(       "--dump-vcd", action="store_true"                                          )
  p.add_argument(       "--mem-lat",  type=int,                                  default=20        )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Pattern: loop1
#-------------------------------------------------------------------------

def loop1():

  # return memory message

  mem = []

  for i in range( 100 ):
    mem.append( 0x00001000+i*4 )
    mem.append( 0xabcd1000+i*4 )

  # return src/sink message

  imsgs = []
  omsgs = []

  for i in range( 100 ):
    imsgs.append( req ( 'rd', i, 0x00001000+i*4, 0, 0 ) )
    omsgs.append( resp( 'rd', i, 0, 0, 0xabcd1000+i*4 ) )

  return [ imsgs, omsgs, mem ]

#-------------------------------------------------------------------------
# Pattern: loop2
#-------------------------------------------------------------------------

def loop2():

  # return memory message

  mem = []

  for i in range( 100 ):
    mem.append( 0x00001000+i*4 )
    mem.append( 0xabcd1000+i*4 )

  for i in range( 100 ):
    mem.append( 0x00002000+i*4 )
    mem.append( 0xabcd2000+i*4 )

  # return src/sink message

  imsgs = []
  omsgs = []

  for i in range( 100 ):
    imsgs.append( req ( 'rd', i, 0x00001000+i*4, 0, 0 ) )
    omsgs.append( resp( 'rd', i, 0, 0, 0xabcd1000+i*4 ) )
    imsgs.append( req ( 'rd', i, 0x00002000+i*4, 0, 0 ) )
    omsgs.append( resp( 'rd', i, 0, 0, 0xabcd2000+i*4 ) )

  return [ imsgs, omsgs, mem ]

#-------------------------------------------------------------------------
# Pattern: loop3
#-------------------------------------------------------------------------

def loop3():

  # return memory message

  mem = []

  for i in range( 100 ):
    mem.append( 0x00001000+i*4 )
    mem.append( 0xabcd1000+i*4 )

  for i in range( 100 ):
    mem.append( 0x00002000+i*4 )
    mem.append( 0xabcd2000+i*4 )

  for i in range( 100 ):
    mem.append( 0x00003080+i*4 )
    mem.append( 0xabcd3080+i*4 )

  # return src/sink message

  imsgs = []
  omsgs = []

  for i in range( 100 ):
    imsgs.append( req ( 'rd', i, 0x00001000+i*4, 0, 0 ) )
    omsgs.append( resp( 'rd', i, 0, 0, 0xabcd1000+i*4 ) )
    imsgs.append( req ( 'rd', i, 0x00002000+i*4, 0, 0 ) )
    omsgs.append( resp( 'rd', i, 0, 0, 0xabcd2000+i*4 ) )
    imsgs.append( req ( 'rd', i, 0x00003080+i*4, 0, 0 ) )
    omsgs.append( resp( 'rd', i, 0, 0, 0xabcd3080+i*4 ) )

  return [ imsgs, omsgs, mem ]

#-------------------------------------------------------------------------
# Pattern: loop4
#-------------------------------------------------------------------------

def loop4():

  # Initialize memory with the first four elements of array 'a'

  mem = []
  for i in range(4):
    mem.append(0x00001000 + i * 4)
    mem.append(0xABCD1000 + i * 4)

  # Generate input and expected output messages

  imsgs = []
  omsgs = []
  for i in range(1000):
    addr = 0x00001000 + (i % 4) * 4
    # Limit the opaque field to 8 bits by using (i % 256)
    imsgs.append(req('rd', i % 256, addr, 0, 0))
    omsgs.append(resp('rd', i % 256, 0, 0, 0xABCD1000 + (i % 4) * 4))

  return [imsgs, omsgs, mem]

#-------------------------------------------------------------------------
# Pattern: loop5
#-------------------------------------------------------------------------

def loop5():

  # Initialize memory with strided elements of array 'a'

  mem = []
  for i in range(0, 100 * 8, 8):
    mem.append(0x00001000 + i * 4)
    mem.append(0xABCD1000 + i * 4)

  # Generate input and expected output messages

  imsgs = []
  omsgs = []
  for i in range(100):
    addr = 0x00001000 + i * 8 * 4
    imsgs.append(req('rd', i, addr, 0, 0))
    omsgs.append(resp('rd', i, 0, 0, 0xABCD1000 + i * 8 * 4))

  return [imsgs, omsgs, mem]

#-------------------------------------------------------------------------
# Pattern: loop6
#-------------------------------------------------------------------------

def loop6():

  # Initialize memory with elements of array 'a'

  mem = []
  for i in range(100):
    addr = 0x00001000 + i * 4
    mem.append(addr)
    mem.append(0xABCD1000 + i * 4)

  # Initialize a reference memory to track writes

  ref_mem = {}
  for i in range(100):
    addr = 0x00001000 + i * 4
    ref_mem[addr] = 0xABCD1000 + i * 4

  # Generate input and expected output messages

  imsgs = []
  omsgs = []
  for i in range(100):
    addr = 0x00001000 + i * 4
    if i % 2 == 0:
      # Write operation
      data = i
      imsgs.append(req('wr', i, addr, 0, data))
      omsgs.append(resp('wr', i, 0, 0, 0))
      # Update reference memory
      ref_mem[addr] = data
    else:
      # Read operation
      imsgs.append(req('rd', i, addr, 0, 0))
      expected_data = ref_mem[addr]
      omsgs.append(resp('rd', i, 0, 0, expected_data))

  return [imsgs, omsgs, mem]

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Determine which model to use in the simulator

  impl_dict = {
    'fl'   : CacheFL,
    'base' : CacheBase,
    'alt'  : CacheAlt,
  }

  # Determine which pattern to use and create the pattern

  input_dict = {
    'loop1' : loop1,
    'loop2' : loop2,
    'loop3' : loop3,
    'loop4' : loop4,
    'loop5' : loop5,
    'loop6' : loop6,

  }

  [ imsgs, omsgs, mem ] = input_dict[ opts.input ]()

  # Create VCD filename

  dump_vcd = ""
  if opts.dump_vcd:
    dump_vcd = "mem-{}-{}.vcd".format( opts.impl, opts.input )

  # Instantiate and elaborate the model

  th = TestHarness( impl_dict[ opts.impl ](), cmp_wo_test_field )

  th.set_param( "top.src.construct",  msgs=imsgs )
  th.set_param( "top.sink.construct", msgs=omsgs )
  th.set_param( "top.mem.construct",  extra_latency=opts.mem_lat )

  th.elaborate()

  th.load( mem[::2], mem[1::2] )

  # Create VCD filename

  unique_name = f"mem-{opts.impl}-{opts.input}"

  cmdline_opts = {
    'dump_vcd': f"{unique_name}" if opts.dump_vcd else '',
  }

  # Configure the test harness component

  config_model_with_cmdline_opts( th, cmdline_opts, duts=['cache'] )

  # Apply necessary passes

  th.apply( DefaultPassGroup( linetrace=opts.trace ) )

  # Reset test harness

  th.sim_reset()

  # Run simulation

  num_misses = 0
  while not th.done():
    th.sim_tick()

    # count number of refill requests to find number of misses

    if th.mem.ifc[0].reqstream.val and th.mem.ifc[0].reqstream.rdy:
      if th.mem.ifc[0].reqstream.msg.type_ == 0:
        num_misses += 1

  # Add a couple extra ticks so that the VCD dump is nicer

  th.sim_tick()
  th.sim_tick()
  th.sim_tick()

  # Handle stats, redirect output to standard out or a file

  if opts.stats:
    num_requests = len(imsgs)
    num_cycles   = th.sim_cycle_count()

    print( f"num_cycles   = {num_cycles}" )
    print( f"num_requests = {num_requests}" )
    print( f"num_misses   = {num_misses}" )
    print( f"miss_rate    = {num_misses/(1.0*num_requests):1.2f}" )
    print( f"amal         = {num_cycles/(1.0*num_requests):1.2f}" )

main()
